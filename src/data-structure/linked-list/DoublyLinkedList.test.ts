import { DoublyLinkedList } from './DoublyLinkedList'

describe('DoubleLinkedList tests', () => {
  it('add', () => {
    const doubleLinkedList = new DoublyLinkedList()
    doubleLinkedList.add(1)
    doubleLinkedList.add(2)
    doubleLinkedList.add(3)
    expect(Array.from(doubleLinkedList.values())).toMatchObject([1, 2, 3])
  })
  it('addAt', () => {
    const doubleLinkedList = new DoublyLinkedList()
    doubleLinkedList.add(1)
    doubleLinkedList.addAt(1, 2)
    expect(Array.from(doubleLinkedList.values())).toMatchObject([1, 2])
    doubleLinkedList.addAt(1, 3)
    expect(Array.from(doubleLinkedList.values())).toMatchObject([1, 3, 2])
    doubleLinkedList.addAt(3, 4)
    expect(Array.from(doubleLinkedList.values())).toMatchObject([1, 3, 2, 4])
    doubleLinkedList.addAt(100, 100)
    expect(Array.from(doubleLinkedList.values())).toMatchObject([1, 3, 2, 4])
  })
  it('remove', () => {
    const doubleLinkedList = new DoublyLinkedList()
    doubleLinkedList.add(1)
    doubleLinkedList.add(2)
    doubleLinkedList.remove(1)
    expect(Array.from(doubleLinkedList.values())).toMatchObject([2])
    doubleLinkedList.add(3)
    doubleLinkedList.add(4)
    expect(Array.from(doubleLinkedList.values())).toMatchObject([2, 3, 4])
    doubleLinkedList.remove(2)
    expect(Array.from(doubleLinkedList.values())).toMatchObject([3, 4])
    doubleLinkedList.remove(4)
    expect(Array.from(doubleLinkedList.values())).toMatchObject([3])
    doubleLinkedList.remove(4)
    expect(Array.from(doubleLinkedList.values())).toMatchObject([3])
    doubleLinkedList.remove(3)
    expect(Array.from(doubleLinkedList.values())).toMatchObject([])
  })
  describe('removeAt', () => {
    it('should return null when remove empty linked-list', () => {
      const doubleLinkedList = new DoublyLinkedList()
      const ele = doubleLinkedList.removeAt(1)
      expect(ele).toEqual(null)
    })
    it('the linked-list shuld be empty when remove the only one element', () => {
      const doubleLinkedList = new DoublyLinkedList()
      doubleLinkedList.add(1)
      const ele = doubleLinkedList.removeAt(1)
      expect(ele).toEqual(1)
      expect(Array.from(doubleLinkedList.values())).toMatchObject([])
    })
    it('should return the first element when remove the fitst element', () => {
      const doubleLinkedList = new DoublyLinkedList()
      doubleLinkedList.add(1)
      doubleLinkedList.add(2)
      const ele = doubleLinkedList.removeAt(1)
      expect(ele).toEqual(1)
      expect(Array.from(doubleLinkedList.values())).toMatchObject([2])
    })
    it('should return the last element when remove the last element', () => {
      const doubleLinkedList = new DoublyLinkedList()
      doubleLinkedList.add(1)
      doubleLinkedList.add(2)
      doubleLinkedList.add(3)
      const ele = doubleLinkedList.removeAt(3)
      expect(ele).toEqual(3)
      expect(Array.from(doubleLinkedList.values())).toMatchObject([1, 2])
    })
    it('should return the acculate element when remove from the middle part of the linked-list', () => {
      const doubleLinkedList = new DoublyLinkedList()
      doubleLinkedList.add(1)
      doubleLinkedList.add(2)
      doubleLinkedList.add(3)
      doubleLinkedList.add(4)
      doubleLinkedList.add(5)
      const ele = doubleLinkedList.removeAt(3)
      expect(ele).toEqual(3)
      expect(Array.from(doubleLinkedList.values())).toMatchObject([1, 2, 4, 5])
    })
  })
  describe('reverse', () => {
    const doubleLinkedList = new DoublyLinkedList()
    doubleLinkedList.add(1)
    doubleLinkedList.add(2)
    doubleLinkedList.add(3)
    doubleLinkedList.add(4)
    doubleLinkedList.add(5)
    doubleLinkedList.reverse()
    expect(Array.from(doubleLinkedList.values())).toMatchObject([5, 4, 3, 2, 1])
  })
})
